#include <pthread.h>
#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <time.h>

#define N 10
#define M 10

int array[N][M];
int secondArray[M];

void print(int arr[N][M]){
    for(int i = 0; i < N; i++){
        for(int j = 0; j < M; j++){
            printf(" %d ", arr[i][j]);
        }
        printf("\n");
    }
}

void* routine(void* arg){
    int index = *(int*) arg;
    double sum = 0;
    for(int j = 0; j < M; j++){
        sum += array[index][j];
    }
    double* result = malloc(sizeof(double));
    *result = sum / M;
    printf("Thread %d result: %.1f\n", index, sum);
    free(arg);
    sleep(1);
    return result;
}

void* findAverage(){
    double sum = 0;
    for(int i = 0; i < N; i++){
        sum += secondArray[i];
    }
    double* result = malloc(sizeof(double));
    *result = sum / N;
    printf("Thread result: %.1f\n", *result);
    return result;
}


int main(int argc, char const *argv[])
{
    srand(time(NULL));
    int k;
    printf("Enter k: ");
    scanf("%d", &k);
    printf("K = %d\n", k);


    for(int i = 0; i < N; i++){
        for(int j = 0; j < M; j++){
            array[i][j] = (rand() % 200) + 1;
        }
    }

    print(array);

    pthread_t th[k];

    // if k < rows
    if(k < N){
        
        int c = 0, rows = N;
        // создаем и выполняем потоки
        for(int i = 0; i < k; i++){
            int* a = malloc(sizeof(int));
            *a = c + i;
            if(pthread_create(th + i, NULL, &routine, a) != 0){
                perror("Failed to create thread\n");//Не удалось создать
            }
        }
        rows = N - k;
        
        // объединение потоков и сохранение их данных во втором массиве
        for(int i = 0; i < k; i++){
            double* res;
            if(pthread_join(th[i], (void**) &res) != 0){
                perror("Failed to join thread\n");
            }
            secondArray[c] = *res;
            c++;
            printf("Result of %d thread: %.1f\n", i, *res);
            free(res);
        }
        // следующие шаги поиска среднего
        while (rows > k){
            for(int i = 0; i < k; i++){
                int* a = malloc(sizeof(int));
                *a = c + i;
                if(pthread_create(th + i, NULL, &routine, a) != 0){
                    perror("Failed to create thread\n");
                }
            }

            rows -= k;

            for(int i = 0; i < k; i++){
                double* res;
                if(pthread_join(th[i], (void**) &res) != 0){
                    perror("Failed to join thread\n");
                }
                secondArray[c] = *res;
                c++;
                printf("Result of %d thread: %.1f\n", i, *res);
                free(res);
            }
        }
        // создаем и выполняем потоки
        for(int i = 0; i <  rows; i++){
                int* a = malloc(sizeof(int));
                *a = c + i;
                if(pthread_create(th + i, NULL, &routine, a) != 0){
                    perror("Failed to create thread\n");
                }
        }
        // объединение потоков и сохранение их данных во втором массиве
        for(int i = 0; i <  rows; i++){
            double* res;
            if(pthread_join(th[i], (void**) &res) != 0){
                perror("Failed to join thread\n");
            }
            secondArray[c] = *res;
            c++;
            printf("Result of %d thread: %.1f\n", i, *res);
            free(res);
        }

        
        // найти среднее значение во втором массиве
        if(pthread_create(th + 0, NULL, &findAverage, NULL) != 0){
            perror("Failed to create thread\n");
        }

        double* res;
        if(pthread_join(th[0], (void **) &res) != 0){
                perror("Failed to join thread\n");
        }

        printf("Average by parallel threads: %.1f\n", *res);
        free(res);
    }

    // if k > rows
    else if(k > N){

        // создаем и выполняем потоки
        for(int i = 0; i < N; i++){
            int* a = malloc(sizeof(int));
            *a = i;
            if(pthread_create(th + i, NULL, &routine, a) != 0){
                perror("Failed to create thread\n");
            }
        }
        
        // объединение потоков и сохранение их данных во втором массиве
        for(int i = 0; i < N; i++){
            double* res;
            if(pthread_join(th[i], (void**) &res) != 0){
                perror("Failed to join thread\n");
            }
            secondArray[i] = *res;
            printf("Result of %d thread: %.1f\n", i, *res);
            free(res);
        }

        // найти среднее значение во втором массиве
        if(pthread_create(th + 0, NULL, &findAverage, NULL) != 0){
            perror("Failed to create thread\n");
        }

        double* res;
        if(pthread_join(th[0], (void **) &res) != 0){
                perror("Failed to join thread\n");
        }

        printf("Average by parallel threads: %.1f\n", *res);
        free(res);
    }
    // if k == rows
    else{
        // создавать и выполнять потоки
        for(int i = 0; i < k; i++){
            int* a = malloc(sizeof(int));
            *a = i;
            if(pthread_create(th + i, NULL, &routine, a) != 0){
                perror("Failed to create thread\n");
            }
        }
        // объединение потоков и сохранение их данных во втором массиве
        for(int i = 0; i < k; i++){
            double* res;
            if(pthread_join(th[i], (void**) &res) != 0){
                perror("Failed to join thread\n");
            }
            secondArray[i] = *res;
            printf("Result of %d thread: %.1f\n", i, *res);
            free(res);
        }
        

        // найти среднее значение во втором массиве
        if(pthread_create(th + 0, NULL, &findAverage, NULL) != 0){
            perror("Failed to create thread\n");
        }

        double* res;
        if(pthread_join(th[0], (void **) &res) != 0){
                perror("Failed to join thread\n");
        }

        printf("Average by parallel threads: %.1f\n", *res);
        free(res);
    }

    // последовательный поиск

    double sum = 0;
    for(int i = 0; i < N; i++){
        for(int j = 0; j < M; j++){
            sum += array[i][j];
        }
    }
    double Result = (sum / (N * M));

    printf("Result by sequential search: %.1f\n", Result);

    return 0;
}